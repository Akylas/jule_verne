project.ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86_64': 3]

android { 
  defaultConfig {  
    compileSdkVersion 31
    multiDexEnabled true
    minSdkVersion 19 
    targetSdkVersion 31
    versionCode 5
    versionName "1.0.0"
    ndk {
      abiFilters.clear()
      // abiFilters  'x86_64', 'arm64-v8a', 'armeabi-v7a'
    }
  }
  lintOptions {
      checkReleaseBuilds false
      // Or, if you prefer, you can continue to check for errors in release builds,
      // but continue the build even when errors are found:
      abortOnError false
  }
  splits {
      abi {
          enable gradle.startParameter.taskNames.contains("assembleRelease")
          reset()
          include  'x86_64', 'arm64-v8a', 'armeabi-v7a'
          universalApk false
      }
  }
  aaptOptions {
    additionalParameters "--no-version-vectors"  
  }  
  buildTypes { // THIS CAUSES RELEASE MODE ERROR ON APP LAUNCH
    release {
      multiDexEnabled false
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled true

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

      // resConfigs "en", "fr", "es"

      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      def absolutePathToAppResources = getAppResourcesPath()
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        "$absolutePathToAppResources/Android/proguard-rules.pro"

      debuggable false
      jniDebuggable false
      renderscriptDebuggable false
    }
    debug {
      multiDexEnabled true
    }
  }
}
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter("ABI"), 0)
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
        }
    }
}