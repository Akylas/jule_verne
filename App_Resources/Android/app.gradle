apply plugin: 'io.sentry.android.gradle'

project.ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86_64': 3]
def BUILD_TOOLS_PATH = "$rootDir/build-tools"

android { 
  compileSdkVersion 33
  def splitEnabled = (gradle.startParameter.taskNames.contains("assembleDebug") && project.hasProperty('abiFilters')) || project.hasProperty('splitEnabled');
  defaultConfig {
    applicationId "com.akylas.juleverne"
    minSdkVersion 19 
    targetSdkVersion 33
    versionCode 70
    versionName "1.1.0"

    if (project.hasProperty('resConfigs')) {
      def resConfigs = project.findProperty('resConfigs')
      reset()
      include resConfigs.split(',')
    } else {
      resConfigs "fr"
    }
    
    ndk {
      if (splitEnabled || project.hasProperty('abiFilters')) {
        abiFilters.clear()
        if (!splitEnabled && project.hasProperty('abiFilters')) {
          abiFilters.addAll(project.findProperty('abiFilters').split(',').collect{it as String})
        }
      }
    }
  }
  lintOptions {
      checkReleaseBuilds false
      // Or, if you prefer, you can continue to check for errors in release builds,
      // but continue the build even when errors are found:
      abortOnError false
  }
  splits {
      abi {
          enable splitEnabled
          if (project.hasProperty('abiFilters')) {
            def abis = project.findProperty('abiFilters')
            reset()
            include abis.split(',')
          }
          universalApk project.hasProperty('universalApk')
      }
      // density {
      //     enable splitEnabled
      //     reset()
      //     include 'xxhdpi'
      // }
  }
  aaptOptions {
    additionalParameters "--no-version-vectors"  
  }  
  buildTypes { // THIS CAUSES RELEASE MODE ERROR ON APP LAUNCH
    release {
      multiDexEnabled false
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled true

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

    //   resConfigs "fr"
    //   resConfigs "en", "fr", "es"

      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      def absolutePathToAppResources = getAppResourcesPath()
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        "$BUILD_TOOLS_PATH/proguard-rules.pro"

      debuggable false
      jniDebuggable false
      renderscriptDebuggable false
    }
    debug {
      multiDexEnabled true
    }
  }
}

dependencies {
    implementation 'androidx.media:media:1.6.0'
    implementation "com.android.support:support-v4:27.+"
}

task createProguard {
    dependsOn 'buildMetadata'
    doLast {
        exec {
            workingDir "$USER_PROJECT_ROOT"
            commandLine 'node', 'scripts/createProguard.js'
        }
    }
}
tasks.whenTaskAdded({ DefaultTask currentTask ->
    if (currentTask =~ /buildMetadata/) {
        currentTask.finalizedBy(createProguard)
    }
    if (currentTask =~ /minify.*WithR8/) {
        currentTask.dependsOn(createProguard)
    }
})


android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter("ABI"), 0)
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
        }
    }
}
android.applicationVariants.all { variant ->
    if (project.hasProperty('splitEnabled')) {
        if (variant.buildType.name == "debug") {
            variant.outputs.each { output ->
                output.versionNameOverride = android.defaultConfig.versionName + "." + variant.versionCode + "-dev";
            }
        } else {
            variant.outputs.each { output ->
                output.versionNameOverride = android.defaultConfig.versionName + "." + variant.versionCode;
            }
        }
    }
}
// configurations {
//     all {
//         exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
//     }
// }


sentry {
    autoUpload = false
    uploadNativeSymbols = false
}