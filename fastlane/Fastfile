class String
  def titlecase
    split(/([[:alpha:]]+)/).map(&:capitalize).join
  end
end

def truncate(string, length = 20)
  string.size > length+5 ? [string[0,length],string[-5,5]].join("...") : string
end

fastlane_version '2.135.2'
opt_out_usage
$ios_scheme = File.basename(File.expand_path('..')).gsub(/[^a-zA-Z0-9]/, "")

desc 'test lane'
lane :test do
    Dir.chdir("..") do
        print "TEST SUCCESSFUL!"
    end
end
desc 'Check Git Status'
lane :checkGitStatus do
    Dir.chdir("..") do
        repo_status = Actions.sh("git status --porcelain -uno")
        repo_clean = repo_status.empty?
        if repo_clean
          UI.success('Git status is clean, all good! ðŸ’ª')
        else
          error_message = "Git repository is dirty! Please ensure the repo is in a clean state by committing/stashing/discarding all changes first."
          UI.user_error!(error_message)
        end
    end
end
desc 'Check Sentry Cli Status'
lane :checkSentryClitatus do
    if sentry_check_cli_installed()
      UI.success('Sentry cli installed, all good! ðŸ’ª')
    else
      error_message = "We cant find sentry cli"
      UI.user_error!(error_message)
    end
end

desc 'Ensure deps are installed'
lane :tns_install do |params| 
  sh("ns", "install")
end

desc 'Prepare the application.'
lane :prepare do |params| 
  platform = params[:platform]
  sh("ns", "prepare", platform, "--release", "--env.adhoc")
end

lane :build_flavor do |params| 
  platform = params[:platform]
  flavor = params[:flavor]
  version = ""
  versionCode = ""
  
  Dir.chdir("..") do
    version  =  sh("./node_modules/.bin/get-version", platform, "version").gsub(/\n/,'')
    versionCode  =  sh("./node_modules/.bin/get-version", platform, "code").gsub(/\n/,'')
  end
  
  # there we add the platform to the dist paramater. The idea is to have different dist for ios android
  # this is because we generate different sources for android and ios so we have different sourceMaps
  # and so to map errors correctly we use different dist for ios and android
  sentryDist =  versionCode + '.' + platform # optional distribution of the release usually the buildnumber
  puts "platform:"  + platform
  puts "flavor:"  + flavor
  puts "version:"  + version
  puts "versionCode:"  + versionCode
  
  build(flavor: flavor)

  sentry_create_release = './node_modules/.bin/sentry-cli'
  sentry_create_release(
    sentry_cli_path: sentry_create_release,
    version: version, # release version to create
  )
  push_to_git_remote

  sh("npm", "run", "sentry-set-commits", "#{version}")
  
  sentry_upload(
    sentry_cli_path: sentry_create_release,
  )

  changelog = get_changelog(platform:platform, flavor:flavor)
  if(flavor == "appcenter") 
    upload_appcenter(changelog:changelog, version: version, versionCode: versionCode, flavor:flavor)
  elsif (flavor != "fdroid")
    upload_store(changelog:changelog, version: version, versionCode: versionCode, flavor:flavor)
  end
  add_git_tag(tag: "#{platform}/#{flavor}/#{version}/#{versionCode}")

  push_git_tags
end


lane :get_changelog  do |params| 
  platform = params[:platform]
  flavor = params[:flavor]
  puts "get_changelog "+  platform
  ignorePlatform = 'ios'
  if(platform == "ios") 
    ignorePlatform = "android"
  end
  isReleasable = analyze_commits(match: "#{platform}/#{flavor}*", ignore_scopes: [ignorePlatform])
  logs = conventional_changelog(format: 'slack', title: "#{platform.capitalize} Beta", display_title:false, display_links:false, order:["feat", "fix", "refactor", "perf"], ignore_scopes: [ignorePlatform])
  puts logs
  logs
end

platform :ios do
  desc 'Upload Dsyms to Sentry'
  lane :sentry_upload do 
    sentry_upload_dsym
  end
  lane :upload_store  do |params| 
    upload_to_testflight(
        changelog:params[:changelog],
        distribute_external: true,
        groups: [params[:flavor]],
        notify_external_testers: true
      )
    
  end
  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
      match(type: 'development', clone_branch_directly:true, generate_apple_certs: false)
      match(type: "appstore", clone_branch_directly:true, generate_apple_certs: false)
  end

  desc 'Build the iOS application.'
  lane :build do |params| 
      if (params[:flavor] == "appcenter")
        register_devices(devices_file: "./fastlane/devices.txt")
        match(type: "adhoc", force_for_new_devices: true, generate_apple_certs: false)
      else
        match(type: "appstore", clone_branch_directly:true, generate_apple_certs: false)
      end
      prepare(platform:'ios')
      build_ios_app(
        output_directory:"dist",
        scheme: $ios_scheme,
        workspace: "./platforms/ios/#{$ios_scheme}.xcworkspace"
      )
  end

  lane :fdroid do
    build_flavor(platform:'ios', flavor:'fdroid')
  end

  desc 'Ship iOS build to Testflight.'
  lane :beta do
    checkSentryClitatus
    checkGitStatus
    tns_install(platform:'ios')
    build_flavor(platform:'ios', flavor:'beta')
  end
  desc 'Ship iOS build to Testflight.'
  lane :alpha do
    checkSentryClitatus
    checkGitStatus
    tns_install(platform:'ios')
    build_flavor(platform:'ios', flavor:'alpha')
  end
end

platform :android do

  desc 'Upload  to Sentry'
  lane :sentry_upload do 
  end

  lane :write_changelog do |params| 
    version = params[:version]
    changelog = params[:changelog]

    if (changelog && changelog.length > 500) 
      changelog = changelog[0..499]
    end

    metadata_dir="metadata/android/fr-FR/changelogs"
    require 'fileutils'
    system 'mkdir', '-p', metadata_dir
    File.write("#{metadata_dir}/#{version}.txt", changelog)
    # Create a new branch and upload a PR for it.
    sh("git add #{metadata_dir}; git commit -m '#{version} release notes' --allow-empty")
  end

  lane :upload_store   do |params| 
    track = params[:flavor]
    if (track == 'beta') 
      track = 'internal'
    end
    write_changelog(version:params[:versionCode], changelog:params[:changelog]);
    upload_to_play_store(
      track: track,
      track_promote_to: track,
      aab: './platforms/android/app/build/outputs/bundle/release/app-release.aab'
    )
  end

  desc 'Build the Android application.'
  lane :build do |params|
    sh("rm", "-fr", "platforms/android")
    if (params[:flavor] == 'fdroid')
      sh("npm", "run", "build.android.production.fdroid")
    elsif (params[:flavor] == 'alpha')
      sh("npm", "run", "build.android.production", "--", "--env.reportall", "--env.devlog")
    else
      sh("npm", "run", "build.android.production")
    end
  end

  desc 'Build the Android application For Github.'
  lane :build_github do
    sh("npm", "run", "build.android.production.fdroid")
  end

  desc 'Ship to Github.'
  lane :github do
    # checkGitStatus
    platform = "android"
    tns_install(platform:platform)
    version = ""
    versionCode = ""
    flavor = "github"

    
    Dir.chdir("..") do
      version  =  sh("./node_modules/.bin/get-version", platform, "version").gsub(/\n/,'')
      versionCode  =  sh("./node_modules/.bin/get-version", platform, "code").gsub(/\n/,'')
    end
    
    puts "platform:"  + platform
    puts "flavor:"  + flavor
    puts "version:"  + version
    puts "versionCode:"  + versionCode

    build_github

    changelog = get_changelog(platform:platform, flavor:flavor)
    write_changelog(version:versionCode, changelog:changelog);
    tag  = "#{platform}/#{flavor}/#{version}/#{versionCode}";
    add_git_tag(tag: tag, force: true)

    push_git_tags(force:true)
    set_github_release(
      repository_name: $repository_name,
      api_token: ENV["GH_TOKEN"],
      name: "v#{version} Build #{versionCode}",
      tag_name: tag,
      description: changelog,
      commitish: "master",
      upload_assets: Dir.glob(File.expand_path("../platforms/android/app/build/outputs/apk/release/*.apk"))
    )
  end

  desc 'build for fdroid.'
  lane :fdroid do
    build_flavor(platform:'android', flavor:'fdroid')
  end

  desc 'Ship to Android Playstore Beta.'
  lane :beta do
    checkSentryClitatus
    checkGitStatus
    tns_install(platform:'android')
    build_flavor(platform:'android', flavor:'beta')
  end

  desc 'Ship to Android Playstore Alpha.'
  lane :alpha do
    checkSentryClitatus
    checkGitStatus
    tns_install(platform:'android')
    build_flavor(platform:'android', flavor:'alpha')
  end
end


